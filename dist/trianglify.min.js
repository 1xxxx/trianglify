function Trianglify(r,e,o){function l(r,e,o){return(r-e[0])*(o[1]-o[0])/(e[1]-e[0])+o[0]}function n(r,e){for(var n=[],t=-h;r+h>t;t+=o.cell_size)for(var i=-_;e+_>i;i+=o.cell_size){var a=t+o.cell_size/2+l(Math.random(),[0,1],[-g,g]),c=i+o.cell_size/2+l(Math.random(),[0,1],[-g,g]);n.push([a,c])}return n}function t(r){return{x:(r[0][0]+r[1][0]+r[2][0])/3,y:(r[0][1]+r[1][1]+r[2][1])/3}}function i(){var r=Object.keys(colorbrewer),e=colorbrewer[r[Math.floor(Math.random()*r.length)]];r=Object.keys(e);var o=e[r[Math.floor(Math.random()*r.length)]];return o}function a(r,e){var o={};for(var l in r)o[l]=r[l];for(l in e){if(!r.hasOwnProperty(l))throw new Error(l+" is not a configuration option for Trianglify. Check your spelling?");o[l]=e[l]}return o}var c=i(),s=a(defaults,{x_colors:c,y_colors:c});o=a(s,o);var u=Math.floor((r+2*o.cell_size)/o.cell_size),f=Math.floor((e+2*o.cell_size)/o.cell_size),h=(u*o.cell_size-r)/2,_=(f*o.cell_size-e)/2,g=(o.cell_size-2*o.cell_padding)/2,d=colorutils.get_2d_gradient(o.x_colors,o.y_colors),y=function(e){return l(e,[-h,r+h],[0,1])},w=function(r){return l(r,[-_,e+_],[0,1])};if(!(r>0&&e>0))throw new Error("You must specify a width and height when generating patterns.");for(var p=n(r,e),v=Delaunay.triangulate(p),z=[],b=function(r){return p[r]},x=0;x<v.length;x+=3){var M,m=[v[x],v[x+1],v[x+2]].map(b),A=t(m);try{M=d(y(A.x),w(A.y)).hexString()}catch(q){throw console.log("width: ",r),console.log("bleed_x, bleed_y: ",h,_),console.log("points: ",p),console.log("vertices: ",m),console.log("centroid: ",A),q}z.push([M,m])}return Pattern(z,o)}var Delaunay=require("delaunay-fast"),Color=require("color"),colorbrewer=require("./colorbrewer"),Pattern=require("./pattern"),colorutils=require("./colorutils"),defaults={cell_size:50,cell_padding:10,x_colors:["#222","#AAA"],y_colors:["#222","#AAA"],color_function:null};Trianglify.colorbrewer=colorbrewer,Trianglify.defaults=defaults,module.exports=Trianglify;